== Functions ==
  0 :: Int
  1 :: Int
(+) :: Int -> Int -> Int

Searching for 2-2-distributive properties...
Searching for 1-2-distributive properties...
Searching for analogy-distributive properties...
Searching for commutative properties...
Searching for nest-commutative properties...
Searching for associative-3 properties...
Searching for cancel properties...
Searching for cancel-2 properties...
Searching for comp-id properties...
Searching for op-id-elem properties...
Searching for op-zero-elem properties...
Searching for fix-point properties...
== Functions ==
reverse :: [a] -> [a]
   (++) :: [a] -> [a] -> [a]
     [] :: [a]
    map :: (a -> a) -> [a] -> [a]
 length :: [a] -> Int
 concat :: [[a]] -> [a]

== Laws ==
Searching for 2-2-distributive properties...
  1. map f (xs ++ ys) = map f xs ++ map f ys
Searching for 1-2-distributive properties...
  2. map f (reverse xs) = reverse (map f xs)
Searching for analogy-distributive properties...
  3. length xs + length ys = length (xs ++ ys)
  4. concat xss ++ concat yss = concat (xss ++ yss)
Searching for commutative properties...
  5. x + y = y + x
Searching for nest-commutative properties...
  6. length (xs ++ ys) = length (ys ++ xs)
Searching for associative-3 properties...
  7. (x + y) + z = x + (y + z)
  8. (xs ++ ys) ++ zs = xs ++ (ys ++ zs)
Searching for cancel properties...
  9. length (reverse xs) = length xs
Searching for cancel-2 properties...
 10. length (map f xs) = length xs
Searching for comp-id properties...
 11. reverse (reverse xs) = xs
Searching for op-id-elem properties...
 12. x + 0 = x
 13. xs ++ [] = xs
Searching for op-zero-elem properties...
 14. map f [] = []
Searching for fix-point properties...
 15. reverse [] = []

